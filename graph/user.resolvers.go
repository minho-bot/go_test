package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"go_test/db_model"
	"go_test/graph/gql_model"
	"time"
)

// 데이터베이스 모델과 GraphQL 모델 간의 변환 함수
func convertToGraphQLModel(u *db_model.User) *gql_model.User {
	gqlUser := &gql_model.User{
		ID:    fmt.Sprintf("%d", u.ID),
		Name:  u.Name,
		Email: u.Email,
	}

	if !u.CreatedAt.IsZero() {
		createdAt := u.CreatedAt.Format(time.RFC3339)
		gqlUser.CreatedAt = &createdAt
	}

	if !u.UpdatedAt.IsZero() {
		updatedAt := u.UpdatedAt.Format(time.RFC3339)
		gqlUser.UpdatedAt = &updatedAt
	}

	return gqlUser
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*gql_model.User, error) {
	newUser := &db_model.User{
		Name:  name,
		Email: email,
	}
	if err := r.DB.Create(newUser).Error; err != nil {
		return nil, err
	}
	return convertToGraphQLModel(newUser), nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}

	if name != nil {
		user.Name = *name
	}
	if email != nil {
		user.Email = *email
	}

	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}
	return convertToGraphQLModel(&user), nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	if err := r.DB.Delete(&user).Error; err != nil {
		return nil, err
	}
	return convertToGraphQLModel(&user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*gql_model.User, error) {
	var users []db_model.User
	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}

	var gqlUsers []*gql_model.User
	for _, user := range users {
		gqlUsers = append(gqlUsers, convertToGraphQLModel(&user))
	}
	return gqlUsers, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, "id = ?", id).Error; err != nil {
		return nil, err
	}
	return convertToGraphQLModel(&user), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
