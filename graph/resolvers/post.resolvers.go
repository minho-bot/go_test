package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"go_test/db_model"
	"go_test/graph/gql_model"
	"strconv"
)

// CreatePost 리졸버
func (r *mutationResolver) CreatePost(ctx context.Context, title string, content string, authorID string) (*gql_model.Post, error) {
	authorIDUint, err := strconv.ParseUint(authorID, 10, 64)
	if err != nil {
		return nil, fmt.Errorf("invalid author ID: %v", err)
	}

	newPost := db_model.Post{
		Title:    title,
		Content:  content,
		AuthorID: uint(authorIDUint),
	}

	if err := r.DB.Create(&newPost).Error; err != nil {
		return nil, err
	}

	return newPost.ToGraphQLModel(), nil
}

// UpdatePost 리졸버
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, title *string, content *string) (*gql_model.Post, error) {
	var post db_model.Post
	if err := r.DB.First(&post, id).Error; err != nil {
		return nil, err
	}

	if title != nil {
		post.Title = *title
	}
	if content != nil {
		post.Content = *content
	}

	if err := r.DB.Save(&post).Error; err != nil {
		return nil, err
	}

	return post.ToGraphQLModel(), nil
}

// DeletePost 리졸버
func (r *mutationResolver) DeletePost(ctx context.Context, id string) (*gql_model.Post, error) {
	var post db_model.Post
	if err := r.DB.First(&post, id).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&post).Error; err != nil {
		return nil, err
	}

	return post.ToGraphQLModel(), nil
}

// Post 리졸버 (단일 조회)
func (r *queryResolver) Post(ctx context.Context, id string) (*gql_model.Post, error) {
	var post db_model.Post
	if err := r.DB.First(&post, id).Error; err != nil {
		return nil, err
	}

	return post.ToGraphQLModel(), nil
}

// Posts 리졸버 (다중 조회)
func (r *queryResolver) Posts(ctx context.Context) ([]*gql_model.Post, error) {
	var posts []db_model.Post
	if err := r.DB.Find(&posts).Error; err != nil {
		return nil, err
	}

	var gqlPosts []*gql_model.Post
	for _, post := range posts {
		gqlPosts = append(gqlPosts, post.ToGraphQLModel())
	}

	return gqlPosts, nil
}
