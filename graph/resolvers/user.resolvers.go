package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"go_test/db_model"
	"go_test/graph/generated"
	"go_test/graph/gql_model"
)

// CreateUser 리졸버
func (r *mutationResolver) CreateUser(ctx context.Context, name string, email string) (*gql_model.User, error) {
	newUser := db_model.User{
		Name:  name,
		Email: email,
	}

	if err := r.DB.Create(&newUser).Error; err != nil {
		return nil, err
	}

	return newUser.ToGraphQLModel(), nil
}

// UpdateUser 리졸버
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, name *string, email *string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}

	if name != nil {
		user.Name = *name
	}
	if email != nil {
		user.Email = *email
	}

	if err := r.DB.Save(&user).Error; err != nil {
		return nil, err
	}

	return user.ToGraphQLModel(), nil
}

// DeleteUser 리졸버
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}

	if err := r.DB.Delete(&user).Error; err != nil {
		return nil, err
	}

	return user.ToGraphQLModel(), nil
}

// User 리졸버
func (r *queryResolver) User(ctx context.Context, id string) (*gql_model.User, error) {
	var user db_model.User
	if err := r.DB.First(&user, id).Error; err != nil {
		return nil, err
	}

	return user.ToGraphQLModel(), nil
}

// Users 리졸버
func (r *queryResolver) Users(ctx context.Context) ([]*gql_model.User, error) {
	var users []db_model.User
	if err := r.DB.Find(&users).Error; err != nil {
		return nil, err
	}

	var gqlUsers []*gql_model.User
	for _, user := range users {
		gqlUsers = append(gqlUsers, user.ToGraphQLModel())
	}

	return gqlUsers, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
